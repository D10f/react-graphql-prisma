type Query {
  users(query: String): [User!]!

  "Retrieves a single user profile by id"
  getUserProfile(id: ID!): User!

  "Retrieves all user pending notifications"
  getUserNotifications(id: ID!): [UserNotification!]!
}

type Mutation {
  deleteNotification(id: ID!): UserNotification!
  registerUser(input: RegisterUserInput!): User!
  loginUser(username: String!, password: String!): User!
  logoutUser(id: ID!): User!
  deleteUser(id: ID!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
}

type User {
  id: ID!

  "The username for this account"
  username: String!

  "A unique email used for recovery passwords and notifications"
  email: String!

  "Password of at least 8 characters in length"
  password: String!

  "JSON Web Token for authentication during registration and login"
  token: String

  "The user's diving certification level as defined by PADI"
  certification: Certification!

  "A timestamp for the exact date when the user was created"
  createdAt: String

  "A timestamp for the exact date when the user was last updated"
  updatedAt: String

  "The user's avatar profile picture"
  url: String

  "The role in the application to determine the access to administrative tasks"
  role: UserRole!

  "Notifications this user has received"
  notifications: [UserNotification!]

  "Posts created by the user"
  posts: [Post!]!

  "Posts the user has given a like"
  likes: [Post!]!

  "Comments created by the user"
  comments: [Comment!]!
}

type UserNotification {
  id: ID!

  "The user who triggered the notification by giving a like or commenting on a post"
  emitterId: ID!

  "The post that was liked or commented on"
  postId: ID!

  "The comment id as corresponds"
  commentId: ID

  "A notification message to be displayed on the UI"
  message: String
}

"TODO: Update mutation responses with a more descriptive type"
type RegisterUserResponse {
  "Similar to a HTTP status code, represents the status of the mutation"
  code: Int!

  "Indicates whether the mutation succeeded or not"
  success: Boolean!

  "Descriptive message meant to be displayed to user"
  message: String!

  "The user object of the mutation"
  user: User
}

input RegisterUserInput {
  username: String!
  email: String!
  password: String!
  confirmPassword: String!
  role: UserRole
}

input UpdateUserInput {
  username: String
  email: String
  password: String
  role: UserRole
}

"Possible roles available for a user"
enum UserRole {
  USER
  ADMIN
}

"Diving certifications assignable to a user"
enum Certification {
  OPEN_WATER
  ADVANCED
  RESCUE
  DIVEMASTER
  INSTRUCTOR
}
